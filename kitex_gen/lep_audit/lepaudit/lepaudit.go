// Code generated by Kitex v0.10.3. DO NOT EDIT.

package lepaudit

import (
	lep_audit "bupt/lep_audit/kitex_gen/lep_audit"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Audit": kitex.NewMethodInfo(
		auditHandler,
		newLepAuditAuditArgs,
		newLepAuditAuditResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateAudit": kitex.NewMethodInfo(
		createAuditHandler,
		newLepAuditCreateAuditArgs,
		newLepAuditCreateAuditResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AuditList": kitex.NewMethodInfo(
		auditListHandler,
		newLepAuditAuditListArgs,
		newLepAuditAuditListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	lepAuditServiceInfo                = NewServiceInfo()
	lepAuditServiceInfoForClient       = NewServiceInfoForClient()
	lepAuditServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lepAuditServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return lepAuditServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return lepAuditServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LepAudit"
	handlerType := (*lep_audit.LepAudit)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "lep_audit",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func auditHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_audit.LepAuditAuditArgs)
	realResult := result.(*lep_audit.LepAuditAuditResult)
	success, err := handler.(lep_audit.LepAudit).Audit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepAuditAuditArgs() interface{} {
	return lep_audit.NewLepAuditAuditArgs()
}

func newLepAuditAuditResult() interface{} {
	return lep_audit.NewLepAuditAuditResult()
}

func createAuditHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_audit.LepAuditCreateAuditArgs)
	realResult := result.(*lep_audit.LepAuditCreateAuditResult)
	success, err := handler.(lep_audit.LepAudit).CreateAudit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepAuditCreateAuditArgs() interface{} {
	return lep_audit.NewLepAuditCreateAuditArgs()
}

func newLepAuditCreateAuditResult() interface{} {
	return lep_audit.NewLepAuditCreateAuditResult()
}

func auditListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lep_audit.LepAuditAuditListArgs)
	realResult := result.(*lep_audit.LepAuditAuditListResult)
	success, err := handler.(lep_audit.LepAudit).AuditList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLepAuditAuditListArgs() interface{} {
	return lep_audit.NewLepAuditAuditListArgs()
}

func newLepAuditAuditListResult() interface{} {
	return lep_audit.NewLepAuditAuditListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Audit(ctx context.Context, req *lep_audit.AuditReq) (r *lep_audit.AuditResp, err error) {
	var _args lep_audit.LepAuditAuditArgs
	_args.Req = req
	var _result lep_audit.LepAuditAuditResult
	if err = p.c.Call(ctx, "Audit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAudit(ctx context.Context, req *lep_audit.CreateAuditReq) (r *lep_audit.CreateAuditResp, err error) {
	var _args lep_audit.LepAuditCreateAuditArgs
	_args.Req = req
	var _result lep_audit.LepAuditCreateAuditResult
	if err = p.c.Call(ctx, "CreateAudit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AuditList(ctx context.Context, req *lep_audit.AuditListReq) (r *lep_audit.AuditListResp, err error) {
	var _args lep_audit.LepAuditAuditListArgs
	_args.Req = req
	var _result lep_audit.LepAuditAuditListResult
	if err = p.c.Call(ctx, "AuditList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
